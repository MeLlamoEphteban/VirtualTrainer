@using VirtualTrainer.Authorization
@model PaginatedList<VirtualTrainer.Exercise>

@{
    ViewData["Title"] = "Index";
}

<h1 style='text-align:center; margin:2rem 0'>Suggestive Exercises</h1>

@{
    if(User.IsInRole(Constants.ContactAdministratorsRole))
    {
        <p>
        <a asp-action="Create">Insert a new exercises</a>
        </p>
    }
}

<form asp-action="Index" method="get">
    <div class='table__search'>
        <p>
            Find by name: <input class="table__input" type="text" name="SearchString" value="@ViewData["CurrentFilter"]" placeholder="Barbell Calf Raise" />
            <input class="table__btn" type="submit" value="Search" />
            <br/>
            <a styel='color:black;' asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table__container">
    <thead class='table__head'>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Exercise Name</a>
            </th>
            <th>
                Sets
            </th>
            <th>
                Reps
            </th>
            <th>
                Weight
            </th>
            <th>
                Instructions
            </th>
            <th></th>
        </tr>
    </thead>
    @{
    if(User.IsInRole(Constants.ContactAdministratorsRole))
    {
        <tbody>
@foreach (var item in Model) {
        <tr class='table__row'>
            <td>
                @Html.DisplayFor(modelItem => item.ExerciseName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Sets)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reps)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Weight)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Instructions)
            </td>
            <td>
                <a style='color:#03fcb1' asp-action="Edit" asp-route-id="@item.Idexercise">Edit</a> |
                <a style='color:#03fcb1' asp-action="Details" asp-route-id="@item.Idexercise">Details</a> |
                <a style='color:#03fcb1' asp-action="Delete" asp-route-id="@item.Idexercise">Delete</a>
            </td>
        </tr>
}
    </tbody>
    }
}

@{
    if(!User.IsInRole(Constants.ContactAdministratorsRole))
    {
        <tbody>
@foreach (var item in Model) {
        <tr class='table__row'>
            <td>
                @Html.DisplayFor(modelItem => item.ExerciseName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Sets)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reps)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Weight)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Instructions)
            </td>
            <td>
                <a style='color:#03fcb1' asp-action="Details" asp-route-id="@item.Idexercise">Details</a>
            </td>
        </tr>
}
    </tbody>
    }
}
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
